import datetime
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, ContentTypes, CallbackQuery, ContentType
from aiogram_calendar import simple_cal_callback, SimpleCalendar

from data.captcha import Captcha
from handlers.groups.get_users_info_two import validate
from keyboards.default import menu_start
from keyboards.inline.in_menu import in_menu_back, in_menu_get_floor, in_menu_set_info_users, \
    in_menu_set_info_users_time_created
from loader import dp, bot, PAYMENTS_PROVIDER_TOKEN
from utils.db_api.db import BotDB


@dp.callback_query_handler(lambda c: c.data.startswith('edit'),state='*')
async def buy_subs_users(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(call.from_user.id, """<i>–ü—Ä–∏–≤–µ—Ç</i>, <b>–¥—Ä—É–≥</b>! üòÉ\n
–Ø - –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π! üåü\n
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫ —è –º–æ–≥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è? ü§î\n
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ! üöÄ""")

    await state.set_state('start_name_1')

@dp.message_handler(text="–î–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è", state='*')
async def buy_subs_users(message: types.Message, state: FSMContext):
    await state.finish()

    await bot.send_message(message.from_user.id, """<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?üåü</b>

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –Ø –Ω–∞—á–Ω—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –í–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.üöÄ
    """)

    await state.set_state('start_name_1')

@dp.message_handler(state='start_name_1')
async def buy_subs_users(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"""<b>–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª.üßò</b>
    
–ü–æ–∫–∞ –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω, –Ω–æ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –º—ã —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑, –ø–æ—ç—Ç–æ–º—É —Å–æ–±–∏—Ä–∞–µ–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éü§î\n""",reply_markup=await in_menu_get_floor())

    await state.set_state('start_name_2')

@dp.callback_query_handler(lambda c: c.data.startswith('floor'),state='start_name_2')
async def back_menu_callback(call: CallbackQuery, state: FSMContext):
    __userid = call.from_user.id
    answer_user = call.data.split(' ')[-1]
    if 'gotovo' in answer_user and '|' in answer_user:
        await call.message.edit_text(text="""<b>–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –í–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è  üè†</b>
 
–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É "—Å–∫—Ä–µ–ø–∫–∞" –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é <b>"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"</b>.
""")
        await state.update_data(floor=call.data.split("|")[-1])
        await state.set_state('start_country_3')
        with open('data/maps1.jpg', 'rb') as photo1, open('data/maps2.jpg', 'rb') as photo2:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ InputMediaPhoto
            media = [types.InputMediaPhoto(photo1), types.InputMediaPhoto(photo2)]
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ InputMediaPhoto –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            await bot.send_media_group(chat_id=call.from_user.id, media=media)
    else:
        await call.message.edit_text(text=f'üì≤ ', reply_markup=await in_menu_get_floor(answer_user))



@dp.message_handler(content_types=ContentType.ANY,state='start_country_3')
async def buy_subs_users(message: types.Message, state: FSMContext):
    try:
        location = message.location
        latitude = location.latitude
        longitude = location.longitude
        await state.update_data(country=f"{latitude} {longitude}")
    except Exception as E:
        await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
        return
    await message.answer(f"""–ï—â—ë –Ω–µ–º–Ω–æ–≥–æ! <b>–ú–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –¥–∞—Ç—É –í–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ—ë –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ìüöÄ</b>
    
–ù–∞–ø—Ä–∏–º–µ—Ä ‚Äî 01.02.1990.  –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ–±–µ—Å–Ω—ã—Ö —Ç–µ–ª –≤ –º–æ–º–µ–Ω—Ç –í–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!  üåü
""")
    await state.set_state('start_date_4')


@dp.message_handler(state='start_date_4')
async def buy_subs_users(message: types.Message, state: FSMContext):
    if validate(message.text):
        await state.update_data(date_day=f'{message.text}')
        await message.answer(f"""–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ. <b>–û—Å—Ç–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –í—ã —Ä–æ–¥–∏–ª–∏—Å—å.</b>
        
–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05:25) –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫  üåü üöÄ
""",reply_markup=await in_menu_set_info_users_time_created())
        await state.set_state('start_date_5')
    else:
        await message.answer(f"üìÖ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")


def validate_time(date_text):
    try:
        if date_text != datetime.datetime.strptime(date_text, "%H:%M").strftime('%H:%M'):
            return False
        return True
    except ValueError:
        return False


@dp.callback_query_handler(lambda c: c.data.startswith('createdtime'),state='start_date_5')
async def back_menu_callback(call: CallbackQuery, state: FSMContext):
    answer_user = call.data.split(' ')[-1]
    await state.update_data(date_hour=answer_user)
    data = await state.get_data()
    await bot.send_message(call.from_user.id, f'–û—Ç–ª–∏—á–Ω–æ. –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –í–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã! ü™Ñ\n\n'
                                              f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ,</b> –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –Ω–∞—à —á—É–¥–µ—Å–Ω—ã–π –∞—Å—Ç—Ä–æ—Å–µ—Ä–≤–µ—Ä. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¢–û–õ–¨–ö–û –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. <b>–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚õî</b>\n\n'
                         f'1. {data["name"]}\n'
                         f'2. {data["floor"]}\n'
                         f'3. {data["country"]}\n'
                         f'4. {data["date_day"]}\n'
                         f'5. {data["date_hour"]}\n', reply_markup=await in_menu_set_info_users())

    await state.set_state('start_get_info_users_6')

@dp.message_handler(state='start_date_5')
async def buy_subs_users(message: types.Message, state: FSMContext):
    if validate_time(message.text):
        await state.update_data(date_hour=message.text)
        data = await state.get_data()
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ. –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –í–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã! ü™Ñ\n\n'
                             f'<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ,</b> –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –Ω–∞—à —á—É–¥–µ—Å–Ω—ã–π –∞—Å—Ç—Ä–æ—Å–µ—Ä–≤–µ—Ä. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–æ–∂–¥–µ–Ω–∏—è –¢–û–õ–¨–ö–û –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ. <b>–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚õî</b>\n\n'
                             f'1. {data["name"]}\n'
                             f'2. {data["floor"]}\n'
                             f'3. {data["country"]}\n'
                             f'4. {data["date_day"]}\n'
                             f'5. {data["date_hour"]}\n',reply_markup= await in_menu_set_info_users())

        await state.set_state('start_get_info_users_6')
    else:
        await message.answer(f"üìÖ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
