
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from handlers.groups.get_users_info_two import validate
from keyboards.inline.in_menu import in_menu_set_date_prognos_forecast
from loader import dp
from utils.db_api.db import BotDB
from utils.random_text import user_prog


@dp.message_handler(text=['üîÆ –ü—Ä–æ–≥–Ω–æ–∑'],state='*')
async def start(message: types.Message, state: FSMContext):
    await message.answer("""–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø. üìù
    """,
                         reply_markup=await in_menu_set_date_prognos_forecast())
#dforproc
    await state.set_state('start_forecast')


@dp.callback_query_handler(lambda c: c.data.startswith('dforproc'), state='start_forecast')
async def buy_subs_users(call: CallbackQuery, state: FSMContext):
    try:
        answer_user = call.data.split(' ')[-1]
        if answer_user == 'get':
            await call.message.edit_text(text="üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2023")
            await state.set_state('start_forecast_two_users')
        else:
            await call.message.edit_text(text=user_prog(answer_user,call.from_user.id))
            get_db_telegram = BotDB()
            get_db_telegram.edit_forecast_users(call.from_user.id, answer_user)
            await state.finish()
    except Exception as E:
        await call.message.edit_text(text="–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        await state.finish()


@dp.message_handler(state='start_forecast_two_users')
async def buy_subs_users(message: types.Message, state: FSMContext):
    try:
        answer = message.text
        if validate(answer):
            await message.answer(text=user_prog(message.text, message.from_user.id))
            get_db_telegram = BotDB()
            get_db_telegram.edit_forecast_users(message.from_user.id, answer)
            await state.finish()
        else:
            await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    except Exception as E:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")
        await state.finish()